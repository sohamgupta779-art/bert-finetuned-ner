# -*- coding: utf-8 -*-
"""hugging_face_Ner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11H76D5aakCtMwDc05Z97NEf1vnOsgRXT

# Resume NER â€” Step 1
Environment setup and dataset check
"""

!pip install -q transformers datasets seqeval evaluate accelerate gradio

import torch, sys
import transformers, datasets

print("Python:", sys.version.splitlines()[0])
print("PyTorch:", torch.__version__, "CUDA available:", torch.cuda.is_available())
print("Transformers:", transformers.__version__)
print("Datasets:", datasets.__version__)

!pip install -U datasets==2.19.1

from datasets import load_dataset


try:
    dataset = load_dataset("conll2003", revision="refs/convert/parquet")
except Exception as e:
    print(f"Could not load dataset as parquet: {e}")

    dataset = load_dataset("conll2003")

dataset

from transformers import AutoTokenizer

MODEL_CHECKPOINT = "bert-base-cased"
tokenizer = AutoTokenizer.from_pretrained(MODEL_CHECKPOINT)

label_list = dataset["train"].features["ner_tags"].feature.names
num_labels = len(label_list)

print("Number of labels:", num_labels)
print("Labels:", label_list)

label_to_id = {l: i for i, l in enumerate(label_list)}
id_to_label = {i: l for i, l in enumerate(label_list)}

def tokenize_and_align_labels(examples):
    tokenized_inputs = tokenizer(
        examples["tokens"],
        truncation=True,
        is_split_into_words=True,
        padding=False
    )

    all_labels = []
    for i, labels in enumerate(examples["ner_tags"]):
        word_ids = tokenized_inputs.word_ids(batch_index=i)
        previous_word_idx = None
        label_ids = []
        for word_idx in word_ids:
            if word_idx is None:
                label_ids.append(-100)
            elif word_idx != previous_word_idx:
                label_ids.append(labels[word_idx])
            else:
                label_ids.append(-100)
            previous_word_idx = word_idx
        all_labels.append(label_ids)

    tokenized_inputs["labels"] = all_labels
    return tokenized_inputs

tokenized_datasets = dataset.map(tokenize_and_align_labels, batched=True)
tokenized_datasets

from transformers import AutoModelForTokenClassification

model = AutoModelForTokenClassification.from_pretrained(
    MODEL_CHECKPOINT,
    num_labels=num_labels,
    id2label=id_to_label,
    label2id=label_to_id
)

import evaluate

metric = evaluate.load("seqeval")

def compute_metrics(p):
    predictions, labels = p
    predictions = predictions.argmax(axis=-1)

    true_labels = [
        [id_to_label[l] for l in label if l != -100]
        for label in labels
    ]
    true_predictions = [
        [id_to_label[p] for (p, l) in zip(pred, label) if l != -100]
        for pred, label in zip(predictions, labels)
    ]

    results = metric.compute(predictions=true_predictions, references=true_labels)
    return {
        "precision": results["overall_precision"],
        "recall": results["overall_recall"],
        "f1": results["overall_f1"],
        "accuracy": results["overall_accuracy"],
    }

from transformers import DataCollatorForTokenClassification

data_collator = DataCollatorForTokenClassification(tokenizer=tokenizer)

from transformers import TrainingArguments

batch_size = 16

args = TrainingArguments(
    output_dir="bert-finetuned-ner",
    eval_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_strategy="steps",
    logging_steps=50,
    report_to="none"
)

from transformers import Trainer

trainer = Trainer(
    model=model,
    args=args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)

trainer.train()

metrics = trainer.evaluate()
print(metrics)

trainer.save_model("bert-ner-model")
tokenizer.save_pretrained("bert-ner-model")

from huggingface_hub import notebook_login
notebook_login()

trainer.push_to_hub("bert-finetuned-ner")

import gradio as gr
import torch


from transformers import pipeline

ner_pipeline = pipeline(
    "token-classification",
    model="bert-ner-model",
    tokenizer="bert-ner-model",
    aggregation_strategy="simple"
)

def ner_inference(text):
    results = ner_pipeline(text)
    return results

demo = gr.Interface(
    fn=ner_inference,
    inputs=gr.Textbox(lines=5, placeholder="Paste resume text here..."),
    outputs="json",
    title="Resume NER Demo"
)

demo.launch(share=True)











